--For this project, I downloaded Spotify data from Kaggle
--And then I created a table and insterted the spotify data
--Finally, I performed analytics on the data using SQL

--Created a table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

--I inserted Spotify Data .csv into the table and performed data analytics

--I determined what the top artists were
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--Then I displayed danceability and energy for the top artists
SELECT artist_name, danceability, energy
FROM BIT_DB.Spotifydata
WHERE popularity > 92;

--And finally I created another column using a case statement to group artists by top, mid, or low popularity
SELECT artist_name, popularity,
    CASE
        WHEN popularity > 90 THEN 'Top'
        WHEN popularity > 80 THEN 'Mid'
        ELSE 'Low'
    END as popularity_category
FROM BIT_DB.Spotifydata;

--Used a CTE this time to create another column based on popularity
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;

